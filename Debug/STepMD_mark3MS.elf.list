
STepMD_mark3MS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080013ac  080013ac  000113ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013d0  080013d0  000113d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080013d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000138  20000004  080013dc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000013c  080013dc  0002013c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b350  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ce7  00000000  00000000  0002b37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000065a8  00000000  00000000  0002d064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a0  00000000  00000000  00033610  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000bc8  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004508  00000000  00000000  00034a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002bf1  00000000  00000000  00038f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003bb71  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001900  00000000  00000000  0003bbf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001394 	.word	0x08001394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001394 	.word	0x08001394

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <HAL_InitTick+0x24>)
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f87c 	bl	8000258 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f836 	bl	80001d8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000000 	.word	0x20000000

08000174 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000176:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f817 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f000 ffa2 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000020 	.word	0x20000020

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000020 	.word	0x20000020

080001b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001b6:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80001be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001c2:	041b      	lsls	r3, r3, #16
 80001c4:	0c1b      	lsrs	r3, r3, #16
 80001c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ce:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80001d0:	60d3      	str	r3, [r2, #12]
 80001d2:	4770      	bx	lr
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001da:	b530      	push	{r4, r5, lr}
 80001dc:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80001de:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e2:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e6:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e8:	2c04      	cmp	r4, #4
 80001ea:	bf28      	it	cs
 80001ec:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ee:	2d06      	cmp	r5, #6

  return (
 80001f0:	f04f 0501 	mov.w	r5, #1
 80001f4:	fa05 f404 	lsl.w	r4, r5, r4
 80001f8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001fc:	bf8c      	ite	hi
 80001fe:	3b03      	subhi	r3, #3
 8000200:	2300      	movls	r3, #0

  return (
 8000202:	400c      	ands	r4, r1
 8000204:	409c      	lsls	r4, r3
 8000206:	fa05 f303 	lsl.w	r3, r5, r3
 800020a:	3b01      	subs	r3, #1
 800020c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800020e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000210:	ea42 0204 	orr.w	r2, r2, r4
 8000214:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	bfaf      	iteee	ge
 800021a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021e:	4b07      	ldrlt	r3, [pc, #28]	; (800023c <HAL_NVIC_SetPriority+0x64>)
 8000220:	f000 000f 	andlt.w	r0, r0, #15
 8000224:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000226:	bfa5      	ittet	ge
 8000228:	b2d2      	uxtbge	r2, r2
 800022a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000234:	bd30      	pop	{r4, r5, pc}
 8000236:	bf00      	nop
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000ed14 	.word	0xe000ed14

08000240 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000240:	0942      	lsrs	r2, r0, #5
 8000242:	2301      	movs	r3, #1
 8000244:	f000 001f 	and.w	r0, r0, #31
 8000248:	fa03 f000 	lsl.w	r0, r3, r0
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_NVIC_EnableIRQ+0x14>)
 800024e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	3801      	subs	r0, #1
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d20a      	bcs.n	8000276 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <HAL_SYSTICK_Config+0x28>)
 8000264:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800026c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000286:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000290:	f022 0204 	bicne.w	r2, r2, #4
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800029c:	4770      	bx	lr

0800029e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800029e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002a0:	f7ff fffc 	bl	800029c <HAL_SYSTICK_Callback>
 80002a4:	bd08      	pop	{r3, pc}
	...

080002a8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80002ac:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d003      	beq.n	80002ba <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002b2:	2304      	movs	r3, #4
 80002b4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ba:	6803      	ldr	r3, [r0, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f022 020e 	bic.w	r2, r2, #14
 80002c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f022 0201 	bic.w	r2, r2, #1
 80002ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_DMA_Abort_IT+0x88>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d013      	beq.n	80002fa <HAL_DMA_Abort_IT+0x52>
 80002d2:	3214      	adds	r2, #20
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d012      	beq.n	80002fe <HAL_DMA_Abort_IT+0x56>
 80002d8:	3214      	adds	r2, #20
 80002da:	4293      	cmp	r3, r2
 80002dc:	d011      	beq.n	8000302 <HAL_DMA_Abort_IT+0x5a>
 80002de:	3214      	adds	r2, #20
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d011      	beq.n	8000308 <HAL_DMA_Abort_IT+0x60>
 80002e4:	3214      	adds	r2, #20
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d011      	beq.n	800030e <HAL_DMA_Abort_IT+0x66>
 80002ea:	3214      	adds	r2, #20
 80002ec:	4293      	cmp	r3, r2
 80002ee:	bf0c      	ite	eq
 80002f0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80002f4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80002f8:	e00b      	b.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 80002fa:	2301      	movs	r3, #1
 80002fc:	e009      	b.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 80002fe:	2310      	movs	r3, #16
 8000300:	e007      	b.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 8000302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000306:	e004      	b.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 8000308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030c:	e001      	b.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	4a08      	ldr	r2, [pc, #32]	; (8000334 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000314:	2400      	movs	r4, #0

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000316:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000318:	2301      	movs	r3, #1
 800031a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800031e:	6b43      	ldr	r3, [r0, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000320:	f880 4020 	strb.w	r4, [r0, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000324:	b113      	cbz	r3, 800032c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000326:	4798      	blx	r3
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
 8000328:	4620      	mov	r0, r4
 800032a:	bd10      	pop	{r4, pc}
 800032c:	4618      	mov	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800032e:	bd10      	pop	{r4, pc}
 8000330:	40020008 	.word	0x40020008
 8000334:	40020000 	.word	0x40020000

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800033c:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800033e:	4626      	mov	r6, r4
 8000340:	4b62      	ldr	r3, [pc, #392]	; (80004cc <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000342:	f8df e194 	ldr.w	lr, [pc, #404]	; 80004d8 <HAL_GPIO_Init+0x1a0>
 8000346:	f8df c194 	ldr.w	ip, [pc, #404]	; 80004dc <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800034a:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800034c:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800034e:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000350:	ea32 0505 	bics.w	r5, r2, r5
 8000354:	f040 80b3 	bne.w	80004be <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000358:	684d      	ldr	r5, [r1, #4]
 800035a:	2d12      	cmp	r5, #18
 800035c:	d028      	beq.n	80003b0 <HAL_GPIO_Init+0x78>
 800035e:	d80e      	bhi.n	800037e <HAL_GPIO_Init+0x46>
 8000360:	2d02      	cmp	r5, #2
 8000362:	d022      	beq.n	80003aa <HAL_GPIO_Init+0x72>
 8000364:	d804      	bhi.n	8000370 <HAL_GPIO_Init+0x38>
 8000366:	b335      	cbz	r5, 80003b6 <HAL_GPIO_Init+0x7e>
 8000368:	2d01      	cmp	r5, #1
 800036a:	d12d      	bne.n	80003c8 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800036c:	68cc      	ldr	r4, [r1, #12]
          break;
 800036e:	e02b      	b.n	80003c8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000370:	2d03      	cmp	r5, #3
 8000372:	d018      	beq.n	80003a6 <HAL_GPIO_Init+0x6e>
 8000374:	2d11      	cmp	r5, #17
 8000376:	d127      	bne.n	80003c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000378:	68cc      	ldr	r4, [r1, #12]
 800037a:	3404      	adds	r4, #4
          break;
 800037c:	e024      	b.n	80003c8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800037e:	4f54      	ldr	r7, [pc, #336]	; (80004d0 <HAL_GPIO_Init+0x198>)
 8000380:	42bd      	cmp	r5, r7
 8000382:	d018      	beq.n	80003b6 <HAL_GPIO_Init+0x7e>
 8000384:	d806      	bhi.n	8000394 <HAL_GPIO_Init+0x5c>
 8000386:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80004e0 <HAL_GPIO_Init+0x1a8>
 800038a:	4545      	cmp	r5, r8
 800038c:	d013      	beq.n	80003b6 <HAL_GPIO_Init+0x7e>
 800038e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000392:	e005      	b.n	80003a0 <HAL_GPIO_Init+0x68>
 8000394:	4575      	cmp	r5, lr
 8000396:	d00e      	beq.n	80003b6 <HAL_GPIO_Init+0x7e>
 8000398:	4565      	cmp	r5, ip
 800039a:	d00c      	beq.n	80003b6 <HAL_GPIO_Init+0x7e>
 800039c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80004e4 <HAL_GPIO_Init+0x1ac>
 80003a0:	4545      	cmp	r5, r8
 80003a2:	d111      	bne.n	80003c8 <HAL_GPIO_Init+0x90>
 80003a4:	e007      	b.n	80003b6 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003a6:	2400      	movs	r4, #0
 80003a8:	e00e      	b.n	80003c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003aa:	68cc      	ldr	r4, [r1, #12]
 80003ac:	3408      	adds	r4, #8
          break;
 80003ae:	e00b      	b.n	80003c8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003b0:	68cc      	ldr	r4, [r1, #12]
 80003b2:	340c      	adds	r4, #12
          break;
 80003b4:	e008      	b.n	80003c8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003b6:	688c      	ldr	r4, [r1, #8]
 80003b8:	b12c      	cbz	r4, 80003c6 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003ba:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80003bc:	bf0c      	ite	eq
 80003be:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80003c0:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003c2:	2408      	movs	r4, #8
 80003c4:	e000      	b.n	80003c8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003c6:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c8:	2aff      	cmp	r2, #255	; 0xff
 80003ca:	bf97      	itett	ls
 80003cc:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003ce:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003d2:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003d6:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003d8:	bf84      	itt	hi
 80003da:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003de:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003e0:	f04f 080f 	mov.w	r8, #15
 80003e4:	fa08 fa05 	lsl.w	sl, r8, r5
 80003e8:	ea29 090a 	bic.w	r9, r9, sl
 80003ec:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f0:	bf88      	it	hi
 80003f2:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003f6:	ea49 0505 	orr.w	r5, r9, r5
 80003fa:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fe:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000402:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000406:	d05a      	beq.n	80004be <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000408:	4d32      	ldr	r5, [pc, #200]	; (80004d4 <HAL_GPIO_Init+0x19c>)
 800040a:	4f32      	ldr	r7, [pc, #200]	; (80004d4 <HAL_GPIO_Init+0x19c>)
 800040c:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040e:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	f045 0501 	orr.w	r5, r5, #1
 8000416:	61bd      	str	r5, [r7, #24]
 8000418:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	f005 0501 	and.w	r5, r5, #1
 8000422:	9501      	str	r5, [sp, #4]
 8000424:	9d01      	ldr	r5, [sp, #4]
 8000426:	f026 0503 	bic.w	r5, r6, #3
 800042a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800042e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
 8000432:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000436:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043a:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000440:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000444:	d010      	beq.n	8000468 <HAL_GPIO_Init+0x130>
 8000446:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800044a:	42b8      	cmp	r0, r7
 800044c:	d00f      	beq.n	800046e <HAL_GPIO_Init+0x136>
 800044e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000452:	42b8      	cmp	r0, r7
 8000454:	d00e      	beq.n	8000474 <HAL_GPIO_Init+0x13c>
 8000456:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800045a:	42b8      	cmp	r0, r7
 800045c:	bf0c      	ite	eq
 800045e:	f04f 0b03 	moveq.w	fp, #3
 8000462:	f04f 0b04 	movne.w	fp, #4
 8000466:	e007      	b.n	8000478 <HAL_GPIO_Init+0x140>
 8000468:	f04f 0b00 	mov.w	fp, #0
 800046c:	e004      	b.n	8000478 <HAL_GPIO_Init+0x140>
 800046e:	f04f 0b01 	mov.w	fp, #1
 8000472:	e001      	b.n	8000478 <HAL_GPIO_Init+0x140>
 8000474:	f04f 0b02 	mov.w	fp, #2
 8000478:	fa0b fa0a 	lsl.w	sl, fp, sl
 800047c:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2U] = temp;
 8000480:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000484:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        AFIO->EXTICR[position >> 2U] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000486:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800048a:	bf14      	ite	ne
 800048c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800048e:	4395      	biceq	r5, r2
 8000490:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000492:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000494:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000498:	bf14      	ite	ne
 800049a:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800049c:	4395      	biceq	r5, r2
 800049e:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004a0:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004a6:	bf14      	ite	ne
 80004a8:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80004aa:	4395      	biceq	r5, r2
 80004ac:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004ae:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b0:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004b4:	bf14      	ite	ne
 80004b6:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80004b8:	ea25 0202 	biceq.w	r2, r5, r2
 80004bc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004be:	3601      	adds	r6, #1
 80004c0:	2e10      	cmp	r6, #16
 80004c2:	f47f af42 	bne.w	800034a <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80004c6:	b003      	add	sp, #12
 80004c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004cc:	40010400 	.word	0x40010400
 80004d0:	10210000 	.word	0x10210000
 80004d4:	40021000 	.word	0x40021000
 80004d8:	10310000 	.word	0x10310000
 80004dc:	10320000 	.word	0x10320000
 80004e0:	10110000 	.word	0x10110000
 80004e4:	10220000 	.word	0x10220000

080004e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004e8:	b902      	cbnz	r2, 80004ec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004ea:	0409      	lsls	r1, r1, #16
 80004ec:	6101      	str	r1, [r0, #16]
 80004ee:	4770      	bx	lr

080004f0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f0:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f6:	07db      	lsls	r3, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004f8:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004fa:	d403      	bmi.n	8000504 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004fc:	682b      	ldr	r3, [r5, #0]
 80004fe:	079f      	lsls	r7, r3, #30
 8000500:	d44f      	bmi.n	80005a2 <HAL_RCC_OscConfig+0xb2>
 8000502:	e090      	b.n	8000626 <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000504:	4c97      	ldr	r4, [pc, #604]	; (8000764 <HAL_RCC_OscConfig+0x274>)
 8000506:	6863      	ldr	r3, [r4, #4]
 8000508:	f003 030c 	and.w	r3, r3, #12
 800050c:	2b04      	cmp	r3, #4
 800050e:	d007      	beq.n	8000520 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000510:	6863      	ldr	r3, [r4, #4]
 8000512:	f003 030c 	and.w	r3, r3, #12
 8000516:	2b08      	cmp	r3, #8
 8000518:	d10a      	bne.n	8000530 <HAL_RCC_OscConfig+0x40>
 800051a:	6863      	ldr	r3, [r4, #4]
 800051c:	03de      	lsls	r6, r3, #15
 800051e:	d507      	bpl.n	8000530 <HAL_RCC_OscConfig+0x40>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000520:	6823      	ldr	r3, [r4, #0]
 8000522:	039c      	lsls	r4, r3, #14
 8000524:	d5ea      	bpl.n	80004fc <HAL_RCC_OscConfig+0xc>
 8000526:	686b      	ldr	r3, [r5, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1e7      	bne.n	80004fc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800052c:	2001      	movs	r0, #1
 800052e:	e167      	b.n	8000800 <HAL_RCC_OscConfig+0x310>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000530:	686b      	ldr	r3, [r5, #4]
 8000532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000536:	d013      	beq.n	8000560 <HAL_RCC_OscConfig+0x70>
 8000538:	b95b      	cbnz	r3, 8000552 <HAL_RCC_OscConfig+0x62>
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000540:	6023      	str	r3, [r4, #0]
 8000542:	6823      	ldr	r3, [r4, #0]
 8000544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000548:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800054a:	f7ff fe2d 	bl	80001a8 <HAL_GetTick>
 800054e:	4606      	mov	r6, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000550:	e023      	b.n	800059a <HAL_RCC_OscConfig+0xaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	d106      	bne.n	8000568 <HAL_RCC_OscConfig+0x78>
 800055a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055e:	6023      	str	r3, [r4, #0]
 8000560:	6823      	ldr	r3, [r4, #0]
 8000562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000566:	e005      	b.n	8000574 <HAL_RCC_OscConfig+0x84>
 8000568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056c:	6023      	str	r3, [r4, #0]
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000574:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000576:	f7ff fe17 	bl	80001a8 <HAL_GetTick>
 800057a:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057c:	6823      	ldr	r3, [r4, #0]
 800057e:	0398      	lsls	r0, r3, #14
 8000580:	d4bc      	bmi.n	80004fc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000582:	f7ff fe11 	bl	80001a8 <HAL_GetTick>
 8000586:	1b80      	subs	r0, r0, r6
 8000588:	2864      	cmp	r0, #100	; 0x64
 800058a:	d9f7      	bls.n	800057c <HAL_RCC_OscConfig+0x8c>
          {
            return HAL_TIMEOUT;
 800058c:	2003      	movs	r0, #3
 800058e:	e137      	b.n	8000800 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000590:	f7ff fe0a 	bl	80001a8 <HAL_GetTick>
 8000594:	1b80      	subs	r0, r0, r6
 8000596:	2864      	cmp	r0, #100	; 0x64
 8000598:	d8f8      	bhi.n	800058c <HAL_RCC_OscConfig+0x9c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	0399      	lsls	r1, r3, #14
 800059e:	d4f7      	bmi.n	8000590 <HAL_RCC_OscConfig+0xa0>
 80005a0:	e7ac      	b.n	80004fc <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005a2:	4c70      	ldr	r4, [pc, #448]	; (8000764 <HAL_RCC_OscConfig+0x274>)
 80005a4:	6863      	ldr	r3, [r4, #4]
 80005a6:	f013 0f0c 	tst.w	r3, #12
 80005aa:	d007      	beq.n	80005bc <HAL_RCC_OscConfig+0xcc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	2b08      	cmp	r3, #8
 80005b4:	d110      	bne.n	80005d8 <HAL_RCC_OscConfig+0xe8>
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	03da      	lsls	r2, r3, #15
 80005ba:	d40d      	bmi.n	80005d8 <HAL_RCC_OscConfig+0xe8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	079b      	lsls	r3, r3, #30
 80005c0:	d502      	bpl.n	80005c8 <HAL_RCC_OscConfig+0xd8>
 80005c2:	692b      	ldr	r3, [r5, #16]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d1b1      	bne.n	800052c <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	696a      	ldr	r2, [r5, #20]
 80005cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005d4:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005d6:	e026      	b.n	8000626 <HAL_RCC_OscConfig+0x136>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005d8:	692a      	ldr	r2, [r5, #16]
 80005da:	4b63      	ldr	r3, [pc, #396]	; (8000768 <HAL_RCC_OscConfig+0x278>)
 80005dc:	b1b2      	cbz	r2, 800060c <HAL_RCC_OscConfig+0x11c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005e2:	f7ff fde1 	bl	80001a8 <HAL_GetTick>
 80005e6:	4606      	mov	r6, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005e8:	6823      	ldr	r3, [r4, #0]
 80005ea:	4a5e      	ldr	r2, [pc, #376]	; (8000764 <HAL_RCC_OscConfig+0x274>)
 80005ec:	079f      	lsls	r7, r3, #30
 80005ee:	d405      	bmi.n	80005fc <HAL_RCC_OscConfig+0x10c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005f0:	f7ff fdda 	bl	80001a8 <HAL_GetTick>
 80005f4:	1b80      	subs	r0, r0, r6
 80005f6:	2802      	cmp	r0, #2
 80005f8:	d9f6      	bls.n	80005e8 <HAL_RCC_OscConfig+0xf8>
 80005fa:	e7c7      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005fc:	6813      	ldr	r3, [r2, #0]
 80005fe:	6969      	ldr	r1, [r5, #20]
 8000600:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000604:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000608:	6013      	str	r3, [r2, #0]
 800060a:	e00c      	b.n	8000626 <HAL_RCC_OscConfig+0x136>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800060c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800060e:	f7ff fdcb 	bl	80001a8 <HAL_GetTick>
 8000612:	4606      	mov	r6, r0
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000614:	6823      	ldr	r3, [r4, #0]
 8000616:	0798      	lsls	r0, r3, #30
 8000618:	d505      	bpl.n	8000626 <HAL_RCC_OscConfig+0x136>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800061a:	f7ff fdc5 	bl	80001a8 <HAL_GetTick>
 800061e:	1b80      	subs	r0, r0, r6
 8000620:	2802      	cmp	r0, #2
 8000622:	d9f7      	bls.n	8000614 <HAL_RCC_OscConfig+0x124>
 8000624:	e7b2      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000626:	682b      	ldr	r3, [r5, #0]
 8000628:	0719      	lsls	r1, r3, #28
 800062a:	d403      	bmi.n	8000634 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800062c:	682b      	ldr	r3, [r5, #0]
 800062e:	075a      	lsls	r2, r3, #29
 8000630:	d42d      	bmi.n	800068e <HAL_RCC_OscConfig+0x19e>
 8000632:	e092      	b.n	800075a <HAL_RCC_OscConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000634:	69aa      	ldr	r2, [r5, #24]
 8000636:	4c4b      	ldr	r4, [pc, #300]	; (8000764 <HAL_RCC_OscConfig+0x274>)
 8000638:	4b4c      	ldr	r3, [pc, #304]	; (800076c <HAL_RCC_OscConfig+0x27c>)
 800063a:	b1da      	cbz	r2, 8000674 <HAL_RCC_OscConfig+0x184>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000640:	f7ff fdb2 	bl	80001a8 <HAL_GetTick>
 8000644:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000648:	079b      	lsls	r3, r3, #30
 800064a:	d405      	bmi.n	8000658 <HAL_RCC_OscConfig+0x168>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800064c:	f7ff fdac 	bl	80001a8 <HAL_GetTick>
 8000650:	1b80      	subs	r0, r0, r6
 8000652:	2802      	cmp	r0, #2
 8000654:	d9f7      	bls.n	8000646 <HAL_RCC_OscConfig+0x156>
 8000656:	e799      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000658:	4b45      	ldr	r3, [pc, #276]	; (8000770 <HAL_RCC_OscConfig+0x280>)
 800065a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	fbb3 f3f2 	udiv	r3, r3, r2
 8000664:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000666:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000668:	9b01      	ldr	r3, [sp, #4]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	9201      	str	r2, [sp, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f9      	bne.n	8000666 <HAL_RCC_OscConfig+0x176>
 8000672:	e7db      	b.n	800062c <HAL_RCC_OscConfig+0x13c>
      RCC_Delay(1);
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000674:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000676:	f7ff fd97 	bl	80001a8 <HAL_GetTick>
 800067a:	4606      	mov	r6, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800067c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800067e:	079f      	lsls	r7, r3, #30
 8000680:	d5d4      	bpl.n	800062c <HAL_RCC_OscConfig+0x13c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000682:	f7ff fd91 	bl	80001a8 <HAL_GetTick>
 8000686:	1b80      	subs	r0, r0, r6
 8000688:	2802      	cmp	r0, #2
 800068a:	d9f7      	bls.n	800067c <HAL_RCC_OscConfig+0x18c>
 800068c:	e77e      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800068e:	4c35      	ldr	r4, [pc, #212]	; (8000764 <HAL_RCC_OscConfig+0x274>)
 8000690:	69e3      	ldr	r3, [r4, #28]
 8000692:	00d8      	lsls	r0, r3, #3
 8000694:	d40a      	bmi.n	80006ac <HAL_RCC_OscConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	69e3      	ldr	r3, [r4, #28]
      pwrclkchanged = SET;
 8000698:	2701      	movs	r7, #1

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069e:	61e3      	str	r3, [r4, #28]
 80006a0:	69e3      	ldr	r3, [r4, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	9b00      	ldr	r3, [sp, #0]
 80006aa:	e000      	b.n	80006ae <HAL_RCC_OscConfig+0x1be>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 80006ac:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ae:	4e31      	ldr	r6, [pc, #196]	; (8000774 <HAL_RCC_OscConfig+0x284>)
 80006b0:	6833      	ldr	r3, [r6, #0]
 80006b2:	05d9      	lsls	r1, r3, #23
 80006b4:	d503      	bpl.n	80006be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b6:	68eb      	ldr	r3, [r5, #12]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d111      	bne.n	80006e0 <HAL_RCC_OscConfig+0x1f0>
 80006bc:	e025      	b.n	800070a <HAL_RCC_OscConfig+0x21a>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006be:	6833      	ldr	r3, [r6, #0]
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80006c6:	f7ff fd6f 	bl	80001a8 <HAL_GetTick>
 80006ca:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006cc:	6833      	ldr	r3, [r6, #0]
 80006ce:	05da      	lsls	r2, r3, #23
 80006d0:	d4f1      	bmi.n	80006b6 <HAL_RCC_OscConfig+0x1c6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006d2:	f7ff fd69 	bl	80001a8 <HAL_GetTick>
 80006d6:	ebc8 0000 	rsb	r0, r8, r0
 80006da:	2864      	cmp	r0, #100	; 0x64
 80006dc:	d9f6      	bls.n	80006cc <HAL_RCC_OscConfig+0x1dc>
 80006de:	e755      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	b96b      	cbnz	r3, 80006fe <HAL_RCC_OscConfig+0x20e>
 80006e2:	6a23      	ldr	r3, [r4, #32]
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e4:	f241 3888 	movw	r8, #5000	; 0x1388
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e8:	f023 0301 	bic.w	r3, r3, #1
 80006ec:	6223      	str	r3, [r4, #32]
 80006ee:	6a23      	ldr	r3, [r4, #32]
 80006f0:	f023 0304 	bic.w	r3, r3, #4
 80006f4:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006f6:	f7ff fd57 	bl	80001a8 <HAL_GetTick>
 80006fa:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006fc:	e025      	b.n	800074a <HAL_RCC_OscConfig+0x25a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fe:	2b05      	cmp	r3, #5
 8000700:	6a23      	ldr	r3, [r4, #32]
 8000702:	d106      	bne.n	8000712 <HAL_RCC_OscConfig+0x222>
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6223      	str	r3, [r4, #32]
 800070a:	6a23      	ldr	r3, [r4, #32]
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	e005      	b.n	800071e <HAL_RCC_OscConfig+0x22e>
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	6223      	str	r3, [r4, #32]
 8000718:	6a23      	ldr	r3, [r4, #32]
 800071a:	f023 0304 	bic.w	r3, r3, #4
 800071e:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000720:	f7ff fd42 	bl	80001a8 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000724:	f241 3688 	movw	r6, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000728:	4680      	mov	r8, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800072a:	6a23      	ldr	r3, [r4, #32]
 800072c:	079b      	lsls	r3, r3, #30
 800072e:	d40f      	bmi.n	8000750 <HAL_RCC_OscConfig+0x260>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000730:	f7ff fd3a 	bl	80001a8 <HAL_GetTick>
 8000734:	ebc8 0000 	rsb	r0, r8, r0
 8000738:	42b0      	cmp	r0, r6
 800073a:	d9f6      	bls.n	800072a <HAL_RCC_OscConfig+0x23a>
 800073c:	e726      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800073e:	f7ff fd33 	bl	80001a8 <HAL_GetTick>
 8000742:	1b80      	subs	r0, r0, r6
 8000744:	4540      	cmp	r0, r8
 8000746:	f63f af21 	bhi.w	800058c <HAL_RCC_OscConfig+0x9c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800074a:	6a23      	ldr	r3, [r4, #32]
 800074c:	0798      	lsls	r0, r3, #30
 800074e:	d4f6      	bmi.n	800073e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000750:	b11f      	cbz	r7, 800075a <HAL_RCC_OscConfig+0x26a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000752:	69e3      	ldr	r3, [r4, #28]
 8000754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000758:	61e3      	str	r3, [r4, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800075a:	69ea      	ldr	r2, [r5, #28]
 800075c:	b962      	cbnz	r2, 8000778 <HAL_RCC_OscConfig+0x288>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800075e:	2000      	movs	r0, #0
 8000760:	e04e      	b.n	8000800 <HAL_RCC_OscConfig+0x310>
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	42420000 	.word	0x42420000
 800076c:	42420480 	.word	0x42420480
 8000770:	20000000 	.word	0x20000000
 8000774:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000778:	4c23      	ldr	r4, [pc, #140]	; (8000808 <HAL_RCC_OscConfig+0x318>)
 800077a:	6863      	ldr	r3, [r4, #4]
 800077c:	f003 030c 	and.w	r3, r3, #12
 8000780:	2b08      	cmp	r3, #8
 8000782:	f43f aed3 	beq.w	800052c <HAL_RCC_OscConfig+0x3c>
 8000786:	4e21      	ldr	r6, [pc, #132]	; (800080c <HAL_RCC_OscConfig+0x31c>)
 8000788:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800078a:	2a02      	cmp	r2, #2
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800078c:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800078e:	d12b      	bne.n	80007e8 <HAL_RCC_OscConfig+0x2f8>
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000790:	f7ff fd0a 	bl	80001a8 <HAL_GetTick>
 8000794:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000796:	6822      	ldr	r2, [r4, #0]
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_RCC_OscConfig+0x318>)
 800079a:	0191      	lsls	r1, r2, #6
 800079c:	d505      	bpl.n	80007aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800079e:	f7ff fd03 	bl	80001a8 <HAL_GetTick>
 80007a2:	1bc0      	subs	r0, r0, r7
 80007a4:	2802      	cmp	r0, #2
 80007a6:	d9f6      	bls.n	8000796 <HAL_RCC_OscConfig+0x2a6>
 80007a8:	e6f0      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007aa:	6a2f      	ldr	r7, [r5, #32]
 80007ac:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80007b0:	d105      	bne.n	80007be <HAL_RCC_OscConfig+0x2ce>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007b2:	6859      	ldr	r1, [r3, #4]
 80007b4:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80007b8:	68a9      	ldr	r1, [r5, #8]
 80007ba:	4301      	orrs	r1, r0
 80007bc:	6059      	str	r1, [r3, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007c0:	6863      	ldr	r3, [r4, #4]
 80007c2:	433a      	orrs	r2, r7
 80007c4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80007c8:	4313      	orrs	r3, r2
 80007ca:	6063      	str	r3, [r4, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80007cc:	2301      	movs	r3, #1
 80007ce:	6033      	str	r3, [r6, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007d0:	f7ff fcea 	bl	80001a8 <HAL_GetTick>
 80007d4:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007d6:	6823      	ldr	r3, [r4, #0]
 80007d8:	019a      	lsls	r2, r3, #6
 80007da:	d4c0      	bmi.n	800075e <HAL_RCC_OscConfig+0x26e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007dc:	f7ff fce4 	bl	80001a8 <HAL_GetTick>
 80007e0:	1b40      	subs	r0, r0, r5
 80007e2:	2802      	cmp	r0, #2
 80007e4:	d9f7      	bls.n	80007d6 <HAL_RCC_OscConfig+0x2e6>
 80007e6:	e6d1      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007e8:	f7ff fcde 	bl	80001a8 <HAL_GetTick>
 80007ec:	4605      	mov	r5, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ee:	6823      	ldr	r3, [r4, #0]
 80007f0:	019b      	lsls	r3, r3, #6
 80007f2:	d5b4      	bpl.n	800075e <HAL_RCC_OscConfig+0x26e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f4:	f7ff fcd8 	bl	80001a8 <HAL_GetTick>
 80007f8:	1b40      	subs	r0, r0, r5
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f7      	bls.n	80007ee <HAL_RCC_OscConfig+0x2fe>
 80007fe:	e6c5      	b.n	800058c <HAL_RCC_OscConfig+0x9c>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000800:	b002      	add	sp, #8
 8000802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	42420060 	.word	0x42420060

08000810 <HAL_RCC_GetSysClockFreq>:
{
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_RCC_GetSysClockFreq+0x64>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000812:	b570      	push	{r4, r5, r6, lr}
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000814:	f103 0510 	add.w	r5, r3, #16
 8000818:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800081a:	b086      	sub	sp, #24
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800081c:	ac02      	add	r4, sp, #8
 800081e:	4622      	mov	r2, r4
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	3308      	adds	r3, #8
 8000826:	c203      	stmia	r2!, {r0, r1}
 8000828:	42ab      	cmp	r3, r5
 800082a:	4614      	mov	r4, r2
 800082c:	d1f7      	bne.n	800081e <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800082e:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000830:	4911      	ldr	r1, [pc, #68]	; (8000878 <HAL_RCC_GetSysClockFreq+0x68>)
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000832:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0U;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000836:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000838:	f002 030c 	and.w	r3, r2, #12
 800083c:	2b08      	cmp	r3, #8
 800083e:	d116      	bne.n	800086e <HAL_RCC_GetSysClockFreq+0x5e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000840:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8000844:	a806      	add	r0, sp, #24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000846:	03d2      	lsls	r2, r2, #15
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000848:	bf41      	itttt	mi
 800084a:	684a      	ldrmi	r2, [r1, #4]
 800084c:	4601      	movmi	r1, r0
 800084e:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000852:	1852      	addmi	r2, r2, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000854:	4403      	add	r3, r0
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000856:	bf44      	itt	mi
 8000858:	f812 0c14 	ldrbmi.w	r0, [r2, #-20]
 800085c:	4a07      	ldrmi	r2, [pc, #28]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800085e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000862:	bf4c      	ite	mi
 8000864:	fbb2 f0f0 	udivmi	r0, r2, r0
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000868:	4805      	ldrpl	r0, [pc, #20]	; (8000880 <HAL_RCC_GetSysClockFreq+0x70>)
 800086a:	4358      	muls	r0, r3
 800086c:	e000      	b.n	8000870 <HAL_RCC_GetSysClockFreq+0x60>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800086e:	4803      	ldr	r0, [pc, #12]	; (800087c <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000870:	b006      	add	sp, #24
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	080013ac 	.word	0x080013ac
 8000878:	40021000 	.word	0x40021000
 800087c:	007a1200 	.word	0x007a1200
 8000880:	003d0900 	.word	0x003d0900

08000884 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000884:	4a4c      	ldr	r2, [pc, #304]	; (80009b8 <HAL_RCC_ClockConfig+0x134>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800088a:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800088c:	4605      	mov	r5, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000894:	460e      	mov	r6, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000896:	d30a      	bcc.n	80008ae <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000898:	6829      	ldr	r1, [r5, #0]
 800089a:	0788      	lsls	r0, r1, #30
 800089c:	d514      	bpl.n	80008c8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800089e:	4847      	ldr	r0, [pc, #284]	; (80009bc <HAL_RCC_ClockConfig+0x138>)
 80008a0:	6843      	ldr	r3, [r0, #4]
 80008a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008a6:	68ab      	ldr	r3, [r5, #8]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	6043      	str	r3, [r0, #4]
 80008ac:	e00c      	b.n	80008c8 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008ae:	6813      	ldr	r3, [r2, #0]
 80008b0:	f023 0307 	bic.w	r3, r3, #7
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	4299      	cmp	r1, r3
 80008c0:	d0ea      	beq.n	8000898 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80008c2:	2001      	movs	r0, #1
 80008c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008c8:	07ca      	lsls	r2, r1, #31
 80008ca:	d406      	bmi.n	80008da <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008cc:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <HAL_RCC_ClockConfig+0x134>)
 80008ce:	6813      	ldr	r3, [r2, #0]
 80008d0:	f003 0307 	and.w	r3, r3, #7
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d341      	bcc.n	800095c <HAL_RCC_ClockConfig+0xd8>
 80008d8:	e04a      	b.n	8000970 <HAL_RCC_ClockConfig+0xec>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008da:	686b      	ldr	r3, [r5, #4]
 80008dc:	4c37      	ldr	r4, [pc, #220]	; (80009bc <HAL_RCC_ClockConfig+0x138>)
 80008de:	2b01      	cmp	r3, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e0:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e2:	d102      	bne.n	80008ea <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80008e8:	e006      	b.n	80008f8 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d102      	bne.n	80008f4 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80008f2:	e001      	b.n	80008f8 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	f012 0f02 	tst.w	r2, #2
 80008f8:	d0e3      	beq.n	80008c2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008fa:	6862      	ldr	r2, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008fc:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000900:	f022 0203 	bic.w	r2, r2, #3
 8000904:	4313      	orrs	r3, r2
 8000906:	6063      	str	r3, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000908:	f7ff fc4e 	bl	80001a8 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800090c:	686b      	ldr	r3, [r5, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800090e:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000910:	2b01      	cmp	r3, #1
 8000912:	d10c      	bne.n	800092e <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b04      	cmp	r3, #4
 800091c:	d0d6      	beq.n	80008cc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800091e:	f7ff fc43 	bl	80001a8 <HAL_GetTick>
 8000922:	1bc0      	subs	r0, r0, r7
 8000924:	4540      	cmp	r0, r8
 8000926:	d9f5      	bls.n	8000914 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000928:	2003      	movs	r0, #3
 800092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800092e:	2b02      	cmp	r3, #2
 8000930:	d10f      	bne.n	8000952 <HAL_RCC_ClockConfig+0xce>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	f003 030c 	and.w	r3, r3, #12
 8000938:	2b08      	cmp	r3, #8
 800093a:	d0c7      	beq.n	80008cc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093c:	f7ff fc34 	bl	80001a8 <HAL_GetTick>
 8000940:	1bc0      	subs	r0, r0, r7
 8000942:	4540      	cmp	r0, r8
 8000944:	d9f5      	bls.n	8000932 <HAL_RCC_ClockConfig+0xae>
 8000946:	e7ef      	b.n	8000928 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000948:	f7ff fc2e 	bl	80001a8 <HAL_GetTick>
 800094c:	1bc0      	subs	r0, r0, r7
 800094e:	4540      	cmp	r0, r8
 8000950:	d8ea      	bhi.n	8000928 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000952:	6863      	ldr	r3, [r4, #4]
 8000954:	f013 0f0c 	tst.w	r3, #12
 8000958:	d1f6      	bne.n	8000948 <HAL_RCC_ClockConfig+0xc4>
 800095a:	e7b7      	b.n	80008cc <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800095c:	6813      	ldr	r3, [r2, #0]
 800095e:	f023 0307 	bic.w	r3, r3, #7
 8000962:	4333      	orrs	r3, r6
 8000964:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000966:	6813      	ldr	r3, [r2, #0]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	429e      	cmp	r6, r3
 800096e:	d1a8      	bne.n	80008c2 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000970:	6829      	ldr	r1, [r5, #0]
 8000972:	4c12      	ldr	r4, [pc, #72]	; (80009bc <HAL_RCC_ClockConfig+0x138>)
 8000974:	f011 0f04 	tst.w	r1, #4
 8000978:	d005      	beq.n	8000986 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800097a:	6863      	ldr	r3, [r4, #4]
 800097c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000980:	68eb      	ldr	r3, [r5, #12]
 8000982:	4313      	orrs	r3, r2
 8000984:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000986:	070b      	lsls	r3, r1, #28
 8000988:	d506      	bpl.n	8000998 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800098a:	6863      	ldr	r3, [r4, #4]
 800098c:	692a      	ldr	r2, [r5, #16]
 800098e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000992:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000996:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000998:	f7ff ff3a 	bl	8000810 <HAL_RCC_GetSysClockFreq>
 800099c:	6863      	ldr	r3, [r4, #4]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_RCC_ClockConfig+0x13c>)
 80009a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_RCC_ClockConfig+0x140>)
 80009aa:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fbcd 	bl	800014c <HAL_InitTick>
  
  return HAL_OK;
 80009b2:	2000      	movs	r0, #0
}
 80009b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009b8:	40022000 	.word	0x40022000
 80009bc:	40021000 	.word	0x40021000
 80009c0:	080013be 	.word	0x080013be
 80009c4:	20000000 	.word	0x20000000

080009c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80009c8:	4b01      	ldr	r3, [pc, #4]	; (80009d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000

080009d4 <HAL_SPI_ErrorCallback>:
 80009d4:	4770      	bx	lr
	...

080009d8 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 80009d8:	6803      	ldr	r3, [r0, #0]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80009da:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80009dc:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80009de:	689a      	ldr	r2, [r3, #8]
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80009e0:	b085      	sub	sp, #20
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80009e2:	f002 0541 	and.w	r5, r2, #65	; 0x41
 80009e6:	2d01      	cmp	r5, #1
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80009e8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
  uint32_t itflag   = hspi->Instance->SR;

  /* SPI in mode Receiver ----------------------------------------------------*/
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 80009ea:	d103      	bne.n	80009f4 <HAL_SPI_IRQHandler+0x1c>
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 80009ec:	064d      	lsls	r5, r1, #25
 80009ee:	d501      	bpl.n	80009f4 <HAL_SPI_IRQHandler+0x1c>
  {
    hspi->RxISR(hspi);
 80009f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80009f2:	e005      	b.n	8000a00 <HAL_SPI_IRQHandler+0x28>
    return;
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 80009f4:	0790      	lsls	r0, r2, #30
 80009f6:	d505      	bpl.n	8000a04 <HAL_SPI_IRQHandler+0x2c>
 80009f8:	060d      	lsls	r5, r1, #24
 80009fa:	d503      	bpl.n	8000a04 <HAL_SPI_IRQHandler+0x2c>
  {
    hspi->TxISR(hspi);
 80009fc:	4620      	mov	r0, r4
 80009fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a00:	4798      	blx	r3
    return;
 8000a02:	e04b      	b.n	8000a9c <HAL_SPI_IRQHandler+0xc4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8000a04:	f012 0f60 	tst.w	r2, #96	; 0x60
 8000a08:	d048      	beq.n	8000a9c <HAL_SPI_IRQHandler+0xc4>
 8000a0a:	0688      	lsls	r0, r1, #26
 8000a0c:	d546      	bpl.n	8000a9c <HAL_SPI_IRQHandler+0xc4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if((itflag & SPI_FLAG_OVR) != RESET)
 8000a0e:	0655      	lsls	r5, r2, #25
 8000a10:	d516      	bpl.n	8000a40 <HAL_SPI_IRQHandler+0x68>
    {
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8000a12:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000a16:	2500      	movs	r5, #0
 8000a18:	2803      	cmp	r0, #3
 8000a1a:	d00a      	beq.n	8000a32 <HAL_SPI_IRQHandler+0x5a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a1e:	f040 0004 	orr.w	r0, r0, #4
 8000a22:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000a24:	9501      	str	r5, [sp, #4]
 8000a26:	68d8      	ldr	r0, [r3, #12]
 8000a28:	9001      	str	r0, [sp, #4]
 8000a2a:	6898      	ldr	r0, [r3, #8]
 8000a2c:	9001      	str	r0, [sp, #4]
 8000a2e:	9801      	ldr	r0, [sp, #4]
 8000a30:	e006      	b.n	8000a40 <HAL_SPI_IRQHandler+0x68>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000a32:	9502      	str	r5, [sp, #8]
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	9202      	str	r2, [sp, #8]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	9b02      	ldr	r3, [sp, #8]
        return;
 8000a3e:	e02d      	b.n	8000a9c <HAL_SPI_IRQHandler+0xc4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if((itflag & SPI_FLAG_MODF) != RESET)
 8000a40:	0690      	lsls	r0, r2, #26
 8000a42:	d50c      	bpl.n	8000a5e <HAL_SPI_IRQHandler+0x86>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8000a44:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a46:	f042 0201 	orr.w	r2, r2, #1
 8000a4a:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	9203      	str	r2, [sp, #12]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	9203      	str	r2, [sp, #12]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	9a03      	ldr	r2, [sp, #12]
    }

    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000a5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000a60:	b1e2      	cbz	r2, 8000a9c <HAL_SPI_IRQHandler+0xc4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000a68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8000a70:	078a      	lsls	r2, r1, #30
 8000a72:	d010      	beq.n	8000a96 <HAL_SPI_IRQHandler+0xbe>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000a74:	685a      	ldr	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8000a76:	6ce0      	ldr	r0, [r4, #76]	; 0x4c

      hspi->State = HAL_SPI_STATE_READY;
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8000a78:	f022 0203 	bic.w	r2, r2, #3
 8000a7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if(hspi->hdmarx != NULL)
 8000a7e:	b118      	cbz	r0, 8000a88 <HAL_SPI_IRQHandler+0xb0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <HAL_SPI_IRQHandler+0xc8>)
 8000a82:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8000a84:	f7ff fc10 	bl	80002a8 <HAL_DMA_Abort_IT>
        }
        /* Abort the SPI DMA Tx channel */
        if(hspi->hdmatx != NULL)
 8000a88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000a8a:	b138      	cbz	r0, 8000a9c <HAL_SPI_IRQHandler+0xc4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_SPI_IRQHandler+0xc8>)
 8000a8e:	6343      	str	r3, [r0, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8000a90:	f7ff fc0a 	bl	80002a8 <HAL_DMA_Abort_IT>
 8000a94:	e002      	b.n	8000a9c <HAL_SPI_IRQHandler+0xc4>
        }
      }
      else
      {
        /* Call user error callback */
        HAL_SPI_ErrorCallback(hspi);
 8000a96:	4620      	mov	r0, r4
 8000a98:	f7ff ff9c 	bl	80009d4 <HAL_SPI_ErrorCallback>
      }
    }
    return;
  }
}
 8000a9c:	b005      	add	sp, #20
 8000a9e:	bd30      	pop	{r4, r5, pc}
 8000aa0:	08000aa5 	.word	0x08000aa5

08000aa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000aa4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000aa6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8000aac:	86c3      	strh	r3, [r0, #54]	; 0x36

  HAL_SPI_ErrorCallback(hspi);
 8000aae:	f7ff ff91 	bl	80009d4 <HAL_SPI_ErrorCallback>
 8000ab2:	bd08      	pop	{r3, pc}

08000ab4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ab4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d034      	beq.n	8000b26 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000ac0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ac4:	b90b      	cbnz	r3, 8000aca <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000ac6:	f000 fb4d 	bl	8001164 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000aca:	68a1      	ldr	r1, [r4, #8]
 8000acc:	6860      	ldr	r0, [r4, #4]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ace:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ad0:	4308      	orrs	r0, r1
 8000ad2:	68e1      	ldr	r1, [r4, #12]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ad4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ad8:	4308      	orrs	r0, r1
 8000ada:	6921      	ldr	r1, [r4, #16]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000adc:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ade:	4308      	orrs	r0, r1
 8000ae0:	6961      	ldr	r1, [r4, #20]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000ae2:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ae4:	4308      	orrs	r0, r1
 8000ae6:	69e1      	ldr	r1, [r4, #28]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000aec:	4308      	orrs	r0, r1
 8000aee:	6a21      	ldr	r1, [r4, #32]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000af0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000af2:	4308      	orrs	r0, r1
 8000af4:	69a2      	ldr	r2, [r4, #24]
 8000af6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000af8:	4308      	orrs	r0, r1
 8000afa:	f402 7100 	and.w	r1, r2, #512	; 0x200
 8000afe:	4301      	orrs	r1, r0
 8000b00:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000b02:	0c12      	lsrs	r2, r2, #16
 8000b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b06:	f002 0204 	and.w	r2, r2, #4
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000b0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b10:	2000      	movs	r0, #0
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000b12:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000b14:	69da      	ldr	r2, [r3, #28]
 8000b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b1a:	61da      	str	r2, [r3, #28]
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 8000b1c:	2301      	movs	r3, #1
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b1e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000b20:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000b24:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8000b28:	bd10      	pop	{r4, pc}

08000b2a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8000b2e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f04f 0302 	mov.w	r3, #2
 8000b36:	f000 80b0 	beq.w	8000c9a <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8000b3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000b3e:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000b46:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b4c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000b52:	680a      	ldr	r2, [r1, #0]
 8000b54:	2a40      	cmp	r2, #64	; 0x40
 8000b56:	d077      	beq.n	8000c48 <HAL_TIM_ConfigClockSource+0x11e>
 8000b58:	d818      	bhi.n	8000b8c <HAL_TIM_ConfigClockSource+0x62>
 8000b5a:	2a10      	cmp	r2, #16
 8000b5c:	f000 808b 	beq.w	8000c76 <HAL_TIM_ConfigClockSource+0x14c>
 8000b60:	d808      	bhi.n	8000b74 <HAL_TIM_ConfigClockSource+0x4a>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8093 	bne.w	8000c8e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b68:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b6e:	f042 0207 	orr.w	r2, r2, #7
 8000b72:	e08b      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000b74:	2a20      	cmp	r2, #32
 8000b76:	f000 8084 	beq.w	8000c82 <HAL_TIM_ConfigClockSource+0x158>
 8000b7a:	2a30      	cmp	r2, #48	; 0x30
 8000b7c:	f040 8087 	bne.w	8000c8e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000b80:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b86:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000b8a:	e07f      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000b8c:	2a70      	cmp	r2, #112	; 0x70
 8000b8e:	d035      	beq.n	8000bfc <HAL_TIM_ConfigClockSource+0xd2>
 8000b90:	d81b      	bhi.n	8000bca <HAL_TIM_ConfigClockSource+0xa0>
 8000b92:	2a50      	cmp	r2, #80	; 0x50
 8000b94:	d041      	beq.n	8000c1a <HAL_TIM_ConfigClockSource+0xf0>
 8000b96:	2a60      	cmp	r2, #96	; 0x60
 8000b98:	d179      	bne.n	8000c8e <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b9a:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000b9c:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000b9e:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ba2:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ba4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ba6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ba8:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000baa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000bae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000bb2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000bb6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000bba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000bbc:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bbe:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bc4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000bc8:	e060      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000bca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000bce:	d011      	beq.n	8000bf4 <HAL_TIM_ConfigClockSource+0xca>
 8000bd0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000bd4:	d15b      	bne.n	8000c8e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000bd6:	689c      	ldr	r4, [r3, #8]
 8000bd8:	688d      	ldr	r5, [r1, #8]
 8000bda:	684a      	ldr	r2, [r1, #4]
 8000bdc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000be0:	68c9      	ldr	r1, [r1, #12]
 8000be2:	432a      	orrs	r2, r5
 8000be4:	4322      	orrs	r2, r4
 8000be6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000bea:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bf2:	e04b      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	f022 0207 	bic.w	r2, r2, #7
 8000bfa:	e047      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000bfc:	689c      	ldr	r4, [r3, #8]
 8000bfe:	688d      	ldr	r5, [r1, #8]
 8000c00:	684a      	ldr	r2, [r1, #4]
 8000c02:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c06:	68c9      	ldr	r1, [r1, #12]
 8000c08:	432a      	orrs	r2, r5
 8000c0a:	4322      	orrs	r2, r4
 8000c0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c10:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000c12:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000c14:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000c18:	e038      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000c1a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c1c:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c1e:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c20:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c24:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c26:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c28:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c2a:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c2e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000c32:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c34:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000c38:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c3a:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c3c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c42:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000c46:	e021      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000c48:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c4a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c4c:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c4e:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c52:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c54:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c56:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c58:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c5c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000c60:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c62:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000c66:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c68:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c6a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c70:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000c74:	e00a      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c76:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c7c:	f042 0217 	orr.w	r2, r2, #23
 8000c80:	e004      	b.n	8000c8c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c82:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c88:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000c8c:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000c94:	2300      	movs	r3, #0
 8000c96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000c9a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000c9c:	bd70      	pop	{r4, r5, r6, pc}

08000c9e <HAL_TIM_PeriodElapsedCallback>:
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_TIM_IC_CaptureCallback>:
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_TIM_TriggerCallback>:
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ca8:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000caa:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cac:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000cae:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cb0:	0791      	lsls	r1, r2, #30
 8000cb2:	d514      	bpl.n	8000cde <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	0792      	lsls	r2, r2, #30
 8000cb8:	d511      	bpl.n	8000cde <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cba:	f06f 0202 	mvn.w	r2, #2
 8000cbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cc0:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cc2:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cc4:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cc6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cc8:	d002      	beq.n	8000cd0 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000cca:	f7ff ffea 	bl	8000ca2 <HAL_TIM_IC_CaptureCallback>
 8000cce:	e004      	b.n	8000cda <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000cd0:	f7ff ffe6 	bl	8000ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f7ff ffe5 	bl	8000ca4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	691a      	ldr	r2, [r3, #16]
 8000ce2:	0750      	lsls	r0, r2, #29
 8000ce4:	d516      	bpl.n	8000d14 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	0751      	lsls	r1, r2, #29
 8000cea:	d513      	bpl.n	8000d14 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000cec:	f06f 0204 	mvn.w	r2, #4
 8000cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000cf2:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000cf4:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000cf6:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000cfa:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000cfc:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000cfe:	d002      	beq.n	8000d06 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d00:	f7ff ffcf 	bl	8000ca2 <HAL_TIM_IC_CaptureCallback>
 8000d04:	e004      	b.n	8000d10 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d06:	f7ff ffcb 	bl	8000ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f7ff ffca 	bl	8000ca4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d10:	2300      	movs	r3, #0
 8000d12:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	0712      	lsls	r2, r2, #28
 8000d1a:	d515      	bpl.n	8000d48 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	0710      	lsls	r0, r2, #28
 8000d20:	d512      	bpl.n	8000d48 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d22:	f06f 0208 	mvn.w	r2, #8
 8000d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d28:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d2a:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d2c:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d2e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d30:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d32:	d002      	beq.n	8000d3a <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d34:	f7ff ffb5 	bl	8000ca2 <HAL_TIM_IC_CaptureCallback>
 8000d38:	e004      	b.n	8000d44 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d3a:	f7ff ffb1 	bl	8000ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f7ff ffb0 	bl	8000ca4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d44:	2300      	movs	r3, #0
 8000d46:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	06d2      	lsls	r2, r2, #27
 8000d4e:	d516      	bpl.n	8000d7e <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	06d0      	lsls	r0, r2, #27
 8000d54:	d513      	bpl.n	8000d7e <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d56:	f06f 0210 	mvn.w	r2, #16
 8000d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d5c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d5e:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d60:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d64:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d66:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d68:	d002      	beq.n	8000d70 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000d6a:	f7ff ff9a 	bl	8000ca2 <HAL_TIM_IC_CaptureCallback>
 8000d6e:	e004      	b.n	8000d7a <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d70:	f7ff ff96 	bl	8000ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff ff95 	bl	8000ca4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	07d1      	lsls	r1, r2, #31
 8000d84:	d508      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	07d2      	lsls	r2, r2, #31
 8000d8a:	d505      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d8c:	f06f 0201 	mvn.w	r2, #1
 8000d90:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff ff83 	bl	8000c9e <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	0610      	lsls	r0, r2, #24
 8000d9e:	d508      	bpl.n	8000db2 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	0611      	lsls	r1, r2, #24
 8000da4:	d505      	bpl.n	8000db2 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000da6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000daa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000dac:	4620      	mov	r0, r4
 8000dae:	f000 f892 	bl	8000ed6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	0652      	lsls	r2, r2, #25
 8000db8:	d508      	bpl.n	8000dcc <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	0650      	lsls	r0, r2, #25
 8000dbe:	d505      	bpl.n	8000dcc <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000dc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff ff6d 	bl	8000ca6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	0691      	lsls	r1, r2, #26
 8000dd2:	d50a      	bpl.n	8000dea <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	0692      	lsls	r2, r2, #26
 8000dd8:	d507      	bpl.n	8000dea <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dda:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000dde:	4620      	mov	r0, r4
    }
  }
}
 8000de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000de4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000de6:	f000 b875 	b.w	8000ed4 <HAL_TIMEx_CommutationCallback>
 8000dea:	bd10      	pop	{r4, pc}

08000dec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000dec:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <TIM_Base_SetConfig+0x6c>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8000dee:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000df0:	4290      	cmp	r0, r2
 8000df2:	d00a      	beq.n	8000e0a <TIM_Base_SetConfig+0x1e>
 8000df4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000df8:	d007      	beq.n	8000e0a <TIM_Base_SetConfig+0x1e>
 8000dfa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000dfe:	4290      	cmp	r0, r2
 8000e00:	d003      	beq.n	8000e0a <TIM_Base_SetConfig+0x1e>
 8000e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d115      	bne.n	8000e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e0a:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e10:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e12:	4a11      	ldr	r2, [pc, #68]	; (8000e58 <TIM_Base_SetConfig+0x6c>)
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d00a      	beq.n	8000e2e <TIM_Base_SetConfig+0x42>
 8000e18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e1c:	d007      	beq.n	8000e2e <TIM_Base_SetConfig+0x42>
 8000e1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000e22:	4290      	cmp	r0, r2
 8000e24:	d003      	beq.n	8000e2e <TIM_Base_SetConfig+0x42>
 8000e26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d103      	bne.n	8000e36 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e2e:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e34:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000e36:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000e3c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000e3e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e40:	688b      	ldr	r3, [r1, #8]
 8000e42:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e44:	680b      	ldr	r3, [r1, #0]
 8000e46:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <TIM_Base_SetConfig+0x6c>)
 8000e4a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e4c:	bf04      	itt	eq
 8000e4e:	690b      	ldreq	r3, [r1, #16]
 8000e50:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000e52:	2301      	movs	r3, #1
 8000e54:	6143      	str	r3, [r0, #20]
 8000e56:	4770      	bx	lr
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e5c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000e5e:	4604      	mov	r4, r0
 8000e60:	b1a0      	cbz	r0, 8000e8c <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000e62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e6a:	b91b      	cbnz	r3, 8000e74 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e70:	f000 f9ac 	bl	80011cc <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e7a:	6820      	ldr	r0, [r4, #0]
 8000e7c:	1d21      	adds	r1, r4, #4
 8000e7e:	f7ff ffb5 	bl	8000dec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000e8c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8000e8e:	bd10      	pop	{r4, pc}

08000e90 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000e94:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	f04f 0302 	mov.w	r3, #2
 8000e9c:	d018      	beq.n	8000ed0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000e9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000ea2:	6803      	ldr	r3, [r0, #0]
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000eaa:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000eac:	685c      	ldr	r4, [r3, #4]
 8000eae:	680a      	ldr	r2, [r1, #0]
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eba:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ebc:	689c      	ldr	r4, [r3, #8]
 8000ebe:	684a      	ldr	r2, [r1, #4]
 8000ec0:	4322      	orrs	r2, r4
 8000ec2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000ed0:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000ed2:	bd10      	pop	{r4, pc}

08000ed4 <HAL_TIMEx_CommutationCallback>:
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000ed6:	4770      	bx	lr

08000ed8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000ed8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eda:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000edc:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ede:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ee6:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ef2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ef6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f7ff fafa 	bl	80004f0 <HAL_RCC_OscConfig>
 8000efc:	b100      	cbz	r0, 8000f00 <SystemClock_Config+0x28>
 8000efe:	e7fe      	b.n	8000efe <SystemClock_Config+0x26>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
 8000f02:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f10:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f12:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f14:	f7ff fcb6 	bl	8000884 <HAL_RCC_ClockConfig>
 8000f18:	4604      	mov	r4, r0
 8000f1a:	b100      	cbz	r0, 8000f1e <SystemClock_Config+0x46>
 8000f1c:	e7fe      	b.n	8000f1c <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f1e:	f7ff fd53 	bl	80009c8 <HAL_RCC_GetHCLKFreq>
 8000f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f2a:	f7ff f995 	bl	8000258 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f7ff f9a8 	bl	8000284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f34:	4622      	mov	r2, r4
 8000f36:	4621      	mov	r1, r4
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff f94c 	bl	80001d8 <HAL_NVIC_SetPriority>
}
 8000f40:	b010      	add	sp, #64	; 0x40
 8000f42:	bd10      	pop	{r4, pc}

08000f44 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000f44:	b500      	push	{lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f7ff f914 	bl	8000174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f7ff ffc4 	bl	8000ed8 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f50:	4b56      	ldr	r3, [pc, #344]	; (80010ac <main+0x168>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000f58:	4855      	ldr	r0, [pc, #340]	; (80010b0 <main+0x16c>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	f042 0220 	orr.w	r2, r2, #32
 8000f5e:	619a      	str	r2, [r3, #24]
 8000f60:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2601      	movs	r6, #1
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	f002 0220 	and.w	r2, r2, #32
 8000f68:	9201      	str	r2, [sp, #4]
 8000f6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2402      	movs	r4, #2

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f70:	f042 0208 	orr.w	r2, r2, #8
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000f78:	f44f 5580 	mov.w	r5, #4096	; 0x1000

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7c:	f002 0208 	and.w	r2, r2, #8
 8000f80:	9202      	str	r2, [sp, #8]
 8000f82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	f042 0204 	orr.w	r2, r2, #4
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	9303      	str	r3, [sp, #12]
 8000f96:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000f98:	f7ff faa6 	bl	80004e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000fa2:	4844      	ldr	r0, [pc, #272]	; (80010b4 <main+0x170>)
 8000fa4:	f7ff faa0 	bl	80004e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	a906      	add	r1, sp, #24
 8000faa:	4841      	ldr	r0, [pc, #260]	; (80010b0 <main+0x16c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	9607      	str	r6, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000fae:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f7ff f9c1 	bl	8000338 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_Pin STEP_Pin RESET_Pin SLEEPn_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin;
 8000fb6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	483e      	ldr	r0, [pc, #248]	; (80010b4 <main+0x170>)
 8000fbc:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DIR_Pin STEP_Pin RESET_Pin SLEEPn_Pin */
  GPIO_InitStruct.Pin = DIR_Pin|STEP_Pin|RESET_Pin|SLEEPn_Pin;
 8000fbe:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc4:	f7ff f9b8 	bl	8000338 <HAL_GPIO_Init>
/* SPI2 init function */
static void MX_SPI2_Init(void)
{

  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fc8:	483b      	ldr	r0, [pc, #236]	; (80010b8 <main+0x174>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <main+0x178>)
 8000fcc:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
static void MX_SPI2_Init(void)
{

  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fd4:	e880 0048 	stmia.w	r0, {r3, r6}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fdc:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe0:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	6203      	str	r3, [r0, #32]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fe6:	2238      	movs	r2, #56	; 0x38
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fec:	230a      	movs	r3, #10
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fee:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8000ff0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff2:	f7ff fd5f 	bl	8000ab4 <HAL_SPI_Init>
 8000ff6:	b100      	cbz	r0, 8000ffa <main+0xb6>
 8000ff8:	e7fe      	b.n	8000ff8 <main+0xb4>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
 8000ffa:	f648 439f 	movw	r3, #35999	; 0x8c9f
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8000ffe:	4c30      	ldr	r4, [pc, #192]	; (80010c0 <main+0x17c>)
  htim2.Init.Prescaler = 35999;
 8001000:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001004:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001008:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 4;
 800100a:	2304      	movs	r3, #4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001010:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 35999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4;
 8001012:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001014:	f7ff ff22 	bl	8000e5c <HAL_TIM_Base_Init>
 8001018:	b100      	cbz	r0, 800101c <main+0xd8>
 800101a:	e7fe      	b.n	800101a <main+0xd6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	a906      	add	r1, sp, #24
 800101e:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001020:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001022:	f7ff fd82 	bl	8000b2a <HAL_TIM_ConfigClockSource>
 8001026:	b100      	cbz	r0, 800102a <main+0xe6>
 8001028:	e7fe      	b.n	8001028 <main+0xe4>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	a904      	add	r1, sp, #16
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff ff2d 	bl	8000e90 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	b100      	cbz	r0, 800103a <main+0xf6>
 8001038:	e7fe      	b.n	8001038 <main+0xf4>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800103a:	4c22      	ldr	r4, [pc, #136]	; (80010c4 <main+0x180>)
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <main+0x184>)
  htim3.Init.Prescaler = 0;
 800103e:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	60a0      	str	r0, [r4, #8]
  htim3.Init.Period = 0;
 8001042:	60e0      	str	r0, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001048:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800104a:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800104c:	f7ff ff06 	bl	8000e5c <HAL_TIM_Base_Init>
 8001050:	b100      	cbz	r0, 8001054 <main+0x110>
 8001052:	e7fe      	b.n	8001052 <main+0x10e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001054:	a906      	add	r1, sp, #24
 8001056:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800105a:	f7ff fd66 	bl	8000b2a <HAL_TIM_ConfigClockSource>
 800105e:	b100      	cbz	r0, 8001062 <main+0x11e>
 8001060:	e7fe      	b.n	8001060 <main+0x11c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001066:	a904      	add	r1, sp, #16
 8001068:	4620      	mov	r0, r4
 800106a:	f7ff ff11 	bl	8000e90 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	b100      	cbz	r0, 8001072 <main+0x12e>
 8001070:	e7fe      	b.n	8001070 <main+0x12c>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001072:	4c16      	ldr	r4, [pc, #88]	; (80010cc <main+0x188>)
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <main+0x18c>)
  htim4.Init.Prescaler = 0;
 8001076:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	60a0      	str	r0, [r4, #8]
  htim4.Init.Period = 0;
 800107a:	60e0      	str	r0, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001080:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001082:	6023      	str	r3, [r4, #0]
  htim4.Init.Prescaler = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 0;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001084:	f7ff feea 	bl	8000e5c <HAL_TIM_Base_Init>
 8001088:	b100      	cbz	r0, 800108c <main+0x148>
 800108a:	e7fe      	b.n	800108a <main+0x146>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800108c:	a906      	add	r1, sp, #24
 800108e:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001092:	f7ff fd4a 	bl	8000b2a <HAL_TIM_ConfigClockSource>
 8001096:	b100      	cbz	r0, 800109a <main+0x156>
 8001098:	e7fe      	b.n	8001098 <main+0x154>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800109e:	a904      	add	r1, sp, #16
 80010a0:	4620      	mov	r0, r4
 80010a2:	f7ff fef5 	bl	8000e90 <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	b100      	cbz	r0, 80010aa <main+0x166>
 80010a8:	e7fe      	b.n	80010a8 <main+0x164>
 80010aa:	e7fe      	b.n	80010aa <main+0x166>
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40010800 	.word	0x40010800
 80010b8:	20000024 	.word	0x20000024
 80010bc:	40003800 	.word	0x40003800
 80010c0:	200000fc 	.word	0x200000fc
 80010c4:	200000bc 	.word	0x200000bc
 80010c8:	40000400 	.word	0x40000400
 80010cc:	2000007c 	.word	0x2000007c
 80010d0:	40000800 	.word	0x40000800

080010d4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010d8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	619a      	str	r2, [r3, #24]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ec:	f7ff f862 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	4611      	mov	r1, r2
 80010f4:	f06f 000b 	mvn.w	r0, #11
 80010f8:	f7ff f86e 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	4611      	mov	r1, r2
 8001100:	f06f 000a 	mvn.w	r0, #10
 8001104:	f7ff f868 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	4611      	mov	r1, r2
 800110c:	f06f 0009 	mvn.w	r0, #9
 8001110:	f7ff f862 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	4611      	mov	r1, r2
 8001118:	f06f 0004 	mvn.w	r0, #4
 800111c:	f7ff f85c 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	4611      	mov	r1, r2
 8001124:	f06f 0003 	mvn.w	r0, #3
 8001128:	f7ff f856 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	4611      	mov	r1, r2
 8001130:	f06f 0001 	mvn.w	r0, #1
 8001134:	f7ff f850 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	4611      	mov	r1, r2
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff f84a 	bl	80001d8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_MspInit+0x8c>)
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001154:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	b003      	add	sp, #12
 8001158:	f85d fb04 	ldr.w	pc, [sp], #4
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000

08001164 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001164:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8001166:	6802      	ldr	r2, [r0, #0]
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_SPI_MspInit+0x60>)

  /* USER CODE END MspInit 1 */
}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800116a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800116c:	429a      	cmp	r2, r3
 800116e:	d127      	bne.n	80011c0 <HAL_SPI_MspInit+0x5c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001170:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8001174:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800117c:	61da      	str	r2, [r3, #28]
 800117e:	69db      	ldr	r3, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <HAL_SPI_MspInit+0x64>)
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	9b01      	ldr	r3, [sp, #4]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800118a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800118e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001194:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2400      	movs	r4, #0
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119a:	f7ff f8cd 	bl	8000338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800119e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	a902      	add	r1, sp, #8
 80011a4:	4808      	ldr	r0, [pc, #32]	; (80011c8 <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f7ff f8c4 	bl	8000338 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011b0:	2024      	movs	r0, #36	; 0x24
 80011b2:	4622      	mov	r2, r4
 80011b4:	4621      	mov	r1, r4
 80011b6:	f7ff f80f 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011ba:	2024      	movs	r0, #36	; 0x24
 80011bc:	f7ff f840 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011c0:	b006      	add	sp, #24
 80011c2:	bd10      	pop	{r4, pc}
 80011c4:	40003800 	.word	0x40003800
 80011c8:	40010c00 	.word	0x40010c00

080011cc <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 80011ce:	6803      	ldr	r3, [r0, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d4:	d111      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80011da:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011dc:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	61da      	str	r2, [r3, #28]
 80011e4:	69db      	ldr	r3, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ee:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f0:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011f2:	f7fe fff1 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f6:	201c      	movs	r0, #28
 80011f8:	e026      	b.n	8001248 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_TIM_Base_MspInit+0x88>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d110      	bne.n	8001222 <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_TIM_Base_MspInit+0x8c>)
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001202:	201d      	movs	r0, #29
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	f042 0202 	orr.w	r2, r2, #2
 800120a:	61da      	str	r2, [r3, #28]
 800120c:	69db      	ldr	r3, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	9302      	str	r3, [sp, #8]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001216:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001218:	9b02      	ldr	r3, [sp, #8]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800121a:	f7fe ffdd 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800121e:	201d      	movs	r0, #29
 8001220:	e012      	b.n	8001248 <HAL_TIM_Base_MspInit+0x7c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_TIM_Base_MspInit+0x90>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d111      	bne.n	800124c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x8c>)
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800122a:	201e      	movs	r0, #30
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800122c:	69da      	ldr	r2, [r3, #28]
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	61da      	str	r2, [r3, #28]
 8001234:	69db      	ldr	r3, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	9303      	str	r3, [sp, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800123e:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001240:	9b03      	ldr	r3, [sp, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001242:	f7fe ffc9 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001246:	201e      	movs	r0, #30
 8001248:	f7fe fffa 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800124c:	b005      	add	sp, #20
 800124e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001252:	bf00      	nop
 8001254:	40000400 	.word	0x40000400
 8001258:	40021000 	.word	0x40021000
 800125c:	40000800 	.word	0x40000800

08001260 <NMI_Handler>:
 8001260:	4770      	bx	lr

08001262 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler>

08001264 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001264:	e7fe      	b.n	8001264 <MemManage_Handler>

08001266 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001266:	e7fe      	b.n	8001266 <BusFault_Handler>

08001268 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler>

0800126a <SVC_Handler>:
 800126a:	4770      	bx	lr

0800126c <DebugMon_Handler>:
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f7fe ff91 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800127a:	f7ff b810 	b.w	800029e <HAL_SYSTICK_IRQHandler>
	...

08001280 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001280:	4801      	ldr	r0, [pc, #4]	; (8001288 <TIM2_IRQHandler+0x8>)
 8001282:	f7ff bd11 	b.w	8000ca8 <HAL_TIM_IRQHandler>
 8001286:	bf00      	nop
 8001288:	200000fc 	.word	0x200000fc

0800128c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800128c:	4801      	ldr	r0, [pc, #4]	; (8001294 <TIM3_IRQHandler+0x8>)
 800128e:	f7ff bd0b 	b.w	8000ca8 <HAL_TIM_IRQHandler>
 8001292:	bf00      	nop
 8001294:	200000bc 	.word	0x200000bc

08001298 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001298:	4801      	ldr	r0, [pc, #4]	; (80012a0 <TIM4_IRQHandler+0x8>)
 800129a:	f7ff bd05 	b.w	8000ca8 <HAL_TIM_IRQHandler>
 800129e:	bf00      	nop
 80012a0:	2000007c 	.word	0x2000007c

080012a4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012a4:	4801      	ldr	r0, [pc, #4]	; (80012ac <SPI2_IRQHandler+0x8>)
 80012a6:	f7ff bb97 	b.w	80009d8 <HAL_SPI_IRQHandler>
 80012aa:	bf00      	nop
 80012ac:	20000024 	.word	0x20000024

080012b0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <SystemInit+0x40>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <SystemInit+0x44>)
 80012be:	400a      	ands	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012cc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012d4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012dc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <SystemInit+0x48>)
 80012e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	f8ff0000 	.word	0xf8ff0000
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012fe:	e003      	b.n	8001308 <LoopCopyDataInit>

08001300 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001302:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001304:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001306:	3104      	adds	r1, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800130c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800130e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001310:	d3f6      	bcc.n	8001300 <CopyDataInit>
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001314:	e002      	b.n	800131c <LoopFillZerobss>

08001316 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001318:	f842 3b04 	str.w	r3, [r2], #4

0800131c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800131e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001320:	d3f9      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001322:	f7ff ffc5 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001326:	f000 f80f 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132a:	f7ff fe0b 	bl	8000f44 <main>
  bx lr
 800132e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001330:	080013d8 	.word	0x080013d8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001338:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800133c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001340:	2000013c 	.word	0x2000013c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <__libc_init_array>:
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <__libc_init_array+0x3c>)
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	461e      	mov	r6, r3
 800134e:	4c0e      	ldr	r4, [pc, #56]	; (8001388 <__libc_init_array+0x40>)
 8001350:	2500      	movs	r5, #0
 8001352:	1ae4      	subs	r4, r4, r3
 8001354:	10a4      	asrs	r4, r4, #2
 8001356:	42a5      	cmp	r5, r4
 8001358:	d004      	beq.n	8001364 <__libc_init_array+0x1c>
 800135a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800135e:	4798      	blx	r3
 8001360:	3501      	adds	r5, #1
 8001362:	e7f8      	b.n	8001356 <__libc_init_array+0xe>
 8001364:	f000 f816 	bl	8001394 <_init>
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <__libc_init_array+0x44>)
 800136a:	4c09      	ldr	r4, [pc, #36]	; (8001390 <__libc_init_array+0x48>)
 800136c:	461e      	mov	r6, r3
 800136e:	1ae4      	subs	r4, r4, r3
 8001370:	10a4      	asrs	r4, r4, #2
 8001372:	2500      	movs	r5, #0
 8001374:	42a5      	cmp	r5, r4
 8001376:	d004      	beq.n	8001382 <__libc_init_array+0x3a>
 8001378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800137c:	4798      	blx	r3
 800137e:	3501      	adds	r5, #1
 8001380:	e7f8      	b.n	8001374 <__libc_init_array+0x2c>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	080013d0 	.word	0x080013d0
 8001388:	080013d0 	.word	0x080013d0
 800138c:	080013d0 	.word	0x080013d0
 8001390:	080013d4 	.word	0x080013d4

08001394 <_init>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	bf00      	nop
 8001398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139a:	bc08      	pop	{r3}
 800139c:	469e      	mov	lr, r3
 800139e:	4770      	bx	lr

080013a0 <_fini>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	bf00      	nop
 80013a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a6:	bc08      	pop	{r3}
 80013a8:	469e      	mov	lr, r3
 80013aa:	4770      	bx	lr
